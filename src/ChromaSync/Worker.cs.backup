// Licensed to the Chroma Control Contributors under one or more agreements.
// The Chroma Control Contributors licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System;
using System.Diagnostics;
using System.Drawing;
using System.Threading.Tasks;
using System.Threading;
using System.Windows;
using ChromaBroadcast;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using RGBKit.Core;

namespace ChromaSync
{
    /// <summary>
    /// The Chroma Sync worker
    /// </summary>
    public class Worker : BackgroundService
    {
        /// <summary>
        /// Sample app guid placeholder, guids are not distributed and you must get your own
        /// </summary>
        static readonly Guid ChromaBroadcastSampleApp = Guid.Parse("e6bef332-95b8-76ec-a6d0-9f402bad244c");

        /// <summary>
        /// The RGB Kit service
        /// </summary>
        private readonly IRGBKitService _rgbKit;


        /// <summary>
        /// Creates the worker
        /// </summary>
        /// <param name="logger">The logger</param>
        /// <param name="configuration">The configuration</param>
        /// <param name="rgbKit">The RGB Kit service</param>
        public Worker(ILogger<Worker> logger, IConfiguration configuration, IRGBKitService rgbKit)
        {
            _rgbKit = rgbKit;

            RzResult lResult = RzChromaBroadcastAPI.Init(ChromaBroadcastSampleApp);
            Debug.WriteLine("RzResult " + lResult);

            if (lResult == RzResult.Success)
            {
                Debug.WriteLine("Initialization Success");
                RzChromaBroadcastAPI.RegisterEventNotification(OnChromaBroadcastEvent);
            }
            else
            {
                Debug.WriteLine("Initialization Failed");
            }
        }

        /// <summary>
        /// Executes the worker
        /// </summary>
        /// <param name="stoppingToken">The stopping token</param>
        /// <returns>A task</returns>
        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            await Task.Delay(1000, stoppingToken);

            Debug.WriteLine("Initializing Chroma Sync...");

            await Task.Delay(1000, stoppingToken);

            foreach (var deviceProvider in _rgbKit.DeviceProviders)
            {
                foreach (var device in deviceProvider.Devices)
                {
                    Debug.WriteLine($"Found Device: {deviceProvider.Name} - {device.Name} - {device.Lights} Lights");
                }
            }

            Debug.WriteLine("Chroma Sync started successfully!");

            while (!stoppingToken.IsCancellationRequested)
            {
                await Task.Delay(1000, stoppingToken);
            }
        }

        /// <summary>
        /// The chroma broadcast event callback
        /// </summary>
        /// <param name="type">The broadcast type</param>
        /// <param name="status">The broadcast status</param>
        /// <param name="effect">The broadcast effect</param>
        /// <returns></returns>
        RzResult OnChromaBroadcastEvent(RzChromaBroadcastType type, RzChromaBroadcastStatus? status, RzChromaBroadcastEffect? effect)
        {
            Debug.WriteLine("Type " + type);
            Debug.WriteLine("Status " + status);
            if (type == RzChromaBroadcastType.BroadcastEffect)
            {

                Debug.WriteLine(Color.FromArgb(effect.Value.ChromaLink1.R, effect.Value.ChromaLink1.G, effect.Value.ChromaLink1.B).ToString());
                Debug.WriteLine(Color.FromArgb(effect.Value.ChromaLink2.R, effect.Value.ChromaLink2.G, effect.Value.ChromaLink2.B).ToString());
                Debug.WriteLine(Color.FromArgb(effect.Value.ChromaLink4.R, effect.Value.ChromaLink4.G, effect.Value.ChromaLink4.B).ToString());
                Debug.WriteLine(Color.FromArgb(effect.Value.ChromaLink5.R, effect.Value.ChromaLink5.G, effect.Value.ChromaLink5.B).ToString());

                Debug.WriteLine("Chroma Broadcast is Live");

            }
            else if (type == RzChromaBroadcastType.BroadcastStatus)
            {
                if (status == RzChromaBroadcastStatus.Live)
                {
                    Debug.WriteLine("Chroma Broadcast is Live");
                }
                else if (status == RzChromaBroadcastStatus.NotLive)
                {

                    Debug.WriteLine("Chroma Broadcast is Not Live");
                }
            }

            return RzResult.Success;
        }

        /// <summary>
        /// Occurs when the window is closing
        /// </summary>
        /// <param name="sender">The sending object</param>
        /// <param name="e">The arguments</param>
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            RzChromaBroadcastAPI.UnRegisterEventNotification();
            RzChromaBroadcastAPI.UnInit();
        }
    }
}
